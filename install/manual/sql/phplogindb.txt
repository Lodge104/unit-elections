SET
@base_dir = {{base_dir}},
@base_url = {{base_url}},
@site_name = {{site_name}},
@curl_enabled = {{curl_enabled}},
@mail_server = {{mail_server}},
@mail_user = {{mail_user}},
@mail_pw = {{mail_pw}},
@mail_security = 'tls',
@mail_port = '587',
@sa_user = {{sa_user}},
@sa_id = {{sa_id}},
@sa_email = {{sa_email}},
@sa_password = {{sa_password}},
@time_zone = {{time_zone}};

CREATE SCHEMA IF NOT EXISTS `{{db_name}}`;

USE `{{db_name}}`;

--
-- Table structure for table `members`
--
DROP TABLE IF EXISTS `members`;
CREATE TABLE `members` (
  `id` char(23) NOT NULL,
  `username` varchar(65) NOT NULL DEFAULT '',
  `password` varchar(255) NOT NULL DEFAULT '',
  `email` varchar(65) NOT NULL,
  `verified` tinyint(1) NOT NULL DEFAULT '0',
  `banned` tinyint(1) NOT NULL DEFAULT '0',
  `mod_timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username_UNIQUE` (`username`),
  UNIQUE KEY `id_UNIQUE` (`id`),
  UNIQUE KEY `email_UNIQUE` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Table structure for table `app_config`
--
DROP TABLE IF EXISTS `app_config`;
CREATE TABLE `app_config` (
  `setting` char(26) NOT NULL,
  `value` varchar(12000) NOT NULL,
  `sortorder` int(5) DEFAULT NULL,
  `category` varchar(25) NOT NULL,
  `type` varchar(15) NOT NULL,
  `description` varchar(140) DEFAULT NULL,
  `required` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`setting`),
  UNIQUE KEY `setting_UNIQUE` (`setting`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Table structure for table `deleted_members`
--
DROP TABLE IF EXISTS `deleted_members`;
CREATE TABLE `deleted_members` (
  `id` char(23) NOT NULL,
  `username` varchar(65) NOT NULL DEFAULT '',
  `password` varchar(65) NOT NULL DEFAULT '',
  `email` varchar(65) NOT NULL,
  `verified` tinyint(1) NOT NULL DEFAULT '0',
  `banned` tinyint(1) NOT NULL DEFAULT '0',
  `mod_timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Table structure for table `login_attempts`
--
DROP TABLE IF EXISTS `login_attempts`;
CREATE TABLE `login_attempts` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `Username` varchar(65) DEFAULT NULL,
  `IP` varchar(20) NOT NULL,
  `Attempts` int(11) NOT NULL,
  `LastLogin` datetime NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

--
-- Table structure for table `mail_log`
--
DROP TABLE IF EXISTS `mail_log`;
CREATE TABLE `mail_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type` varchar(45) NOT NULL DEFAULT 'generic',
  `status` varchar(45) DEFAULT NULL,
  `recipient` varchar(5000) DEFAULT NULL,
  `response` mediumtext NOT NULL,
  `isread` tinyint(1) NOT NULL DEFAULT '0',
  `timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=utf8;

--
-- Table structure for table `member_info`
--
DROP TABLE IF EXISTS `member_info`;
CREATE TABLE `member_info` (
  `userid` char(23) NOT NULL,
  `firstname` varchar(45) NOT NULL,
  `lastname` varchar(55) DEFAULT NULL,
  `phone` varchar(20) DEFAULT NULL,
  `address1` varchar(45) DEFAULT NULL,
  `address2` varchar(45) DEFAULT NULL,
  `city` varchar(45) DEFAULT NULL,
  `state` varchar(30) DEFAULT NULL,
  `country` varchar(45) DEFAULT NULL,
  `bio` varchar(20000) DEFAULT NULL,
  `userimage` varchar(255) DEFAULT NULL,
  UNIQUE KEY `userid_UNIQUE` (`userid`),
  KEY `fk_userid_idx` (`userid`),
  CONSTRAINT `fk_userid` FOREIGN KEY (`userid`) REFERENCES `members` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


--
-- Table structure for table `member_jail`
--
CREATE TABLE `member_jail` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` char(23) NOT NULL,
  `banned_hours` FLOAT NOT NULL DEFAULT '24',
  `reason` varchar(2000) DEFAULT NULL,
  `timestamp` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id_UNIQUE` (`user_id`),
  KEY `fk_userid_idx` (`user_id`),
  CONSTRAINT `fk_userid_jail` FOREIGN KEY (`user_id`) REFERENCES `members` (`id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS `roles`;

CREATE TABLE `roles` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  `description` varchar(255) DEFAULT NULL,
  `required` tinyint(1) NOT NULL DEFAULT '0',
  `default_role` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name_UNIQUE` (`name`),
  UNIQUE KEY `default_role_UNIQUE` (`default_role`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS `member_roles`;

CREATE TABLE `member_roles` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `member_id` char(23) NOT NULL,
  `role_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uq_unique_idx` (`member_id`,`role_id`),
  KEY `member_id_idx` (`member_id`),
  KEY `fk_role_id_idx` (`role_id`),
  CONSTRAINT `fk_member_id` FOREIGN KEY (`member_id`) REFERENCES `members` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_role_id` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

--
-- Table structure for table `tokens`
--
DROP TABLE IF EXISTS `tokens`;
CREATE TABLE `tokens` (
  `tokenid` char(25) NOT NULL,
  `userid` char(23) NOT NULL,
  `expired` tinyint(1) NOT NULL DEFAULT '0',
  `timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`tokenid`),
  UNIQUE KEY `tokenid_UNIQUE` (`tokenid`),
  UNIQUE KEY `userid_UNIQUE` (`userid`),
  CONSTRAINT `userid_t` FOREIGN KEY (`userid`) REFERENCES `members` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Table structure for table `permissions`
--
CREATE TABLE `permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `description` varchar(255) DEFAULT NULL,
  `category` varchar(50) NOT NULL DEFAULT 'General',
  `required` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`),
  UNIQUE KEY `name_UNIQUE` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;

--
-- Table structure for table `role_permissions`
--
CREATE TABLE `role_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `role_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_Role_Id_idx` (`role_id`),
  KEY `fk_Permission_Id_idx` (`permission_id`),
  CONSTRAINT `fk_Permission_Id` FOREIGN KEY (`permission_id`) REFERENCES `permissions` (`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_Role_Id_2` FOREIGN KEY (`role_id`) REFERENCES `roles` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=64 DEFAULT CHARSET=utf8;


--
-- Table structure for table `cookies`
--
DROP TABLE IF EXISTS `cookies`;
CREATE TABLE `cookies` (
  `cookieid` char(23) NOT NULL,
  `userid` char(23) NOT NULL,
  `tokenid` char(25) NOT NULL,
  `expired` tinyint(1) NOT NULL DEFAULT '0',
  `timestamp` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`userid`),
  CONSTRAINT `userid` FOREIGN KEY (`userid`) REFERENCES `members` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

SET GLOBAL event_scheduler = ON;

/*!50106 DROP EVENT IF EXISTS `cleanupOldDeleted` */;
DELIMITER ;;
/*!50106 CREATE*/ /*!50106 EVENT `cleanupOldDeleted` ON SCHEDULE EVERY 1 DAY STARTS '2017-03-20 18:33:40' ON COMPLETION NOT PRESERVE ENABLE COMMENT 'Removes deleted records older than 30 days.' DO BEGIN DELETE FROM deleted_members WHERE mod_timestamp < DATE_SUB(NOW(), INTERVAL 30 DAY); END */ ;;

CREATE
VIEW `vw_banned_users` AS
    SELECT
        `member_jail`.`user_id` AS `user_id`,
        `member_jail`.`timestamp` AS `banned_timestamp`,
        `member_jail`.`banned_hours` AS `banned_hours`,
        (`member_jail`.`banned_hours` - (TIME_TO_SEC(TIMEDIFF(NOW(), `member_jail`.`timestamp`)) / 3600)) AS `hours_remaining`
    FROM
        `member_jail`;


DELIMITER $
CREATE EVENT `unbanUsers`
    ON SCHEDULE EVERY 5 MINUTE
DO
BEGIN
    DELETE FROM `vw_banned_users` where hours_remaining < 0;
    UPDATE `members` m SET m.banned = 0 where m.banned = 1 AND m.id not in (select v.user_id from `vw_banned_users` v);
END $
DELIMITER ;

/*** DATABASE SEEDING ***/

REPLACE INTO app_config (`sortorder`,`setting`,`category`,`value`,`type`,`description`,`required`) VALUES (27,'active_email','Messages','Your new account is now active! Click this link to log in!','text','Email message when account is verified',1), (26,'active_msg','Messages','Your account has been verified!','text','Display message when account is verified',1), (21,'admin_verify','Security','false','boolean','Require admin verification',1), (6,'avatar_dir','Website','/user/avatars','text','Directory where user avatars should be stored inside of base site directory. Do not include base_dir path.',1), (2,'base_dir','Website', @base_dir ,'hidden','Base directory of website in filesystem. \"C:\\...\" in windows, \"/...\" in unix systems',1), (3,'base_url','Website', @base_url, 'url','Base URL of website. Example: \"http://sitename.com\"',1), (19,'cookie_expire_seconds','Security','2592000','number','Cookie expiration (in seconds)',1), (13,'from_email','Mailer',@mail_user,'email','From email address. Should typically be the same as \"mail_user\" email.',1), (14,'from_name','Mailer','Test Website','text','Name that shows up in \"from\" field of emails',1), (4,'htmlhead','Website','<!DOCTYPE html><html lang=\'en\'><head><meta charset=\'utf-8\'><meta name=\'viewport\' content-width=\'device-width\', initial-scale=\'1\', shrink-to-fit=\'no\'>','textarea','Main HTML header of website (without login-specific includes and script tags). Do not close <html> tag! Will break application functionality',1), (20,'jwt_secret','Security','php-login','text','Secret for JWT for tokens (Can be anything)',1), (18,'login_timeout','Security','300','number','Cooloff time for too many failed logins (in seconds)',1), (12,'mail_port','Mailer',@mail_port,'number','Mail port. Common settings are 465 for ssl, 587 for tls, 25 for other',1), (10,'mail_pw','Mailer',@mail_pw,'password','Email password to authenticate mailer',1), (11,'mail_security','Mailer',@mail_security,'text','Mail security type. Possible values are \"ssl\", \"tls\" or leave blank',1), (8,'mail_server','Mailer',@mail_server,'text','Mail server address. Example: \"smtp.email.com\"',1), (7,'mail_server_type','Mailer','smtp','text','Type of email server. SMTP is most typical. Other server types untested.',1), (9,'mail_user','Mailer',@mail_user,'email','Email user',1), (5,'mainlogo','Website','','url','URL of main site logo. Example \"http://sitename.com/logo.jpg\"',1), (17,'max_attempts','Security','5','number','Maximum login attempts',1), (16,'password_min_length','Security','6','number','Minimum password length if \"password_policy_enforce\" is set to true',1), (15,'password_policy_enforce','Security','true','boolean','Require a mixture of upper and lowercase letters and minimum password length (set by \"password_min_length\")',1), (28,'reset_email','Messages','Click the link below to reset your password','text','Email message when user wants to reset their password',1), (23,'signup_requires_admin','Messages','Thank you for signing up! Before you can login, your account needs to be activated by an administrator.','text','Message displayed when user signs up, but requires admin approval',1), (22,'signup_thanks','Messages','Thank you for signing up! You will receive an email shortly confirming the verification of your account.','text','Message displayed when user signs up and can verify themselves via email',1), (1,'site_name','Website', @site_name,'text','Website name',1), (24,'verify_email_admin','Messages','Thank you for signing up! Your account will be reviewed by an admin shortly','text','Email message when account requires admin verification',1), (25,'verify_email_noadmin','Messages','Click this link to verify your new account!','text','Email message when user can verify themselves',1), (29, 'curl_enabled','Website',@curl_enabled, 'boolean','Enable curl for various processes such as background email sending', 1), (30, 'email_working','Mailer','false', 'hidden','Indicates if email settings are correct and can connect to a mail server', 1), (31, 'admin_email','Website',@sa_email, 'text','Site administrator email address', 1),(32, 'timezone', 'Website', @time_zone, 'timezone', 'Server time zone', 1),(33, 'token_validity','Security','24', 'number','Token validity in Hours (default 24 hours)',1);


SET FOREIGN_KEY_CHECKS= 0; REPLACE INTO `members` (id, username, password, email, verified, banned) values(@sa_id, @sa_user, @sa_password, @sa_email, 1, 0); SET FOREIGN_KEY_CHECKS= 1;

SET FOREIGN_KEY_CHECKS = 0; REPLACE INTO `roles` (`id`, `name`, `description`, `required`, `default_role`) VALUES (1, 'Superadmin', 'Master administrator of site', 1, NULL), (2, 'Admin', 'Site administrator', 1, NULL), (3, 'Standard User', 'Default site role for standard users', 1, 1); SET FOREIGN_KEY_CHECKS = 1;

SET FOREIGN_KEY_CHECKS = 0; REPLACE INTO `member_roles` (`id`, `member_id`, `role_id`) VALUES (1, @sa_id, 1); SET FOREIGN_KEY_CHECKS = 1;

SET FOREIGN_KEY_CHECKS = 0; REPLACE INTO `permissions` (`id`,`name`,`description`,`category`,`required`)
	VALUES
		(1,'Verify Users','Administration permission allowing for the verification of new users','Users',1),
		(2,'Delete Unverified Users','Administration permission allowing the deletion of unverified users','Users',1),
		(3,'Ban Users','Moderation permission allowing the banning of users','Users',1),
		(4,'Assign Roles to Users','Administration permission allowing the assignment of roles to users','Users',1),
		(5,'Assign Users to Roles','Administration permission allowing the assignment of users to roles','Roles',1),
		(6,'Create Roles','Administration permission allowing for the creation of new roles','Roles',1),
		(7,'Delete Roles','Administration permission allowing for the deletion of roles','Roles',1),
		(8,'Create Permissions','Administration permission allowing for the creation of new permissions','Permissions',1),
		(9,'Delete Permissions','Administration permission allowing for the deletion of permissions','Permissions',1),
		(10,'Assign Permissions to Roles','Administration permission allowing the assignment of permissions to roles','Roles',1),
		(11,'Edit Site Config','Administration permission allowing the editing of core site configuration (dangerous)','Administration',1),
		(12,'View Permissions','Administration permission allowing the viewing of all permissions','Permissions',1),
		(13,'View Roles','Administration permission allowing for the viewing of all roles','Roles',1),
		(14,'View Users','Administration permission allowing for the viewing of all users','Users',1),
		(15,'Delete Users','Administration permission allowing for the deletion of users','Users',1);
SET FOREIGN_KEY_CHECKS = 1;

SET FOREIGN_KEY_CHECKS = 0;
REPLACE INTO `role_permissions` (`id`, `role_id`, `permission_id`)
	VALUES
		-- Superadmin
		(1, 1, 1),
    (2, 1, 2),
    (3, 1, 3),
    (4, 1, 4),
    (5, 1, 5),
    (6, 1, 6),
    (7, 1, 7),
    (8, 1, 8),
    (9, 1, 9),
    (10, 1, 10),
    (11, 1, 11),
    (12, 1, 12),
    (13, 1, 13),
    (14, 1, 14),
    (15, 1, 15),
    -- Admin
    (16, 2, 1),
    (17, 2, 2),
    (18, 2, 3),
    (19, 2, 4),
    (20, 2, 5),
    (21, 2, 12),
    (22, 2, 13),
    (23, 2, 14),
    (24, 2, 15);
SET FOREIGN_KEY_CHECKS = 1;

DELIMITER $
CREATE TRIGGER `assign_default_role` AFTER INSERT ON `members` FOR EACH ROW
BEGIN
	SET @default_role = (SELECT ID FROM `roles` WHERE `default_role` = 1 LIMIT 1);
    INSERT INTO `member_roles` (`member_id`, `role_id`) VALUES (NEW.id, @default_role);
END $
DELIMITER ;

DELIMITER $
CREATE TRIGGER prevent_deletion_of_required_perms
  BEFORE DELETE
  ON `permissions`
  FOR EACH ROW
  BEGIN
    IF OLD.required = 1 THEN
      SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete required permissions';
    END IF;
END $
DELIMITER ;

DELIMITER $
CREATE TRIGGER prevent_deletion_of_required_roles
    BEFORE DELETE
    ON `roles`
    FOR EACH ROW
    BEGIN
      IF OLD.required = 1 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete required roles';
      END IF;
  END$
DELIMITER ;

DELIMITER $
CREATE TRIGGER prevent_deletion_of_superadmin
  BEFORE DELETE
  ON `members`
  FOR EACH ROW
  BEGIN
  	IF
    (SELECT count(m.id)
  	FROM `members` m
  	INNER JOIN `member_roles` mr on mr.member_id = m.id
  	INNER JOIN `roles` r on mr.role_id = r.id
  	WHERE
  	 m.verified = 1
  	AND m.banned = 0
  	AND r.name = 'Superadmin'
      AND m.id = OLD.id) > 0
    THEN
      SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete superadmin user';
    END IF;
  END $
DELIMITER ;

DELIMITER $
CREATE TRIGGER at_least_one_superadmin_assigned
	BEFORE DELETE
		ON `member_roles`
		FOR EACH ROW
		BEGIN
			IF ((old.role_id = 1)) && (SELECT COUNT(id) from `member_roles` where role_id = 1) <= 1 THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'There must be at least one Superadmin assigned';
		END IF;
	END $
DELIMITER ;

DELIMITER $
CREATE TRIGGER `move_to_deleted_members`
  AFTER DELETE
    ON `members`
    FOR EACH ROW
    BEGIN
      DELETE FROM deleted_members WHERE deleted_members.id = OLD.id;
      INSERT INTO deleted_members ( id, username, password, email, verified) VALUES ( OLD.id, OLD.username, OLD.password, OLD.email, OLD.verified );
    END $
DELIMITER ;
